{
  "address": "0x379f55d1c88C41Cb449dC8Cb664fE5a4490e9049",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxMessages",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxVoteOptions",
              "type": "uint256"
            }
          ],
          "internalType": "struct Params.MaxValues",
          "name": "_maxValues",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IMACI",
              "name": "maci",
              "type": "address"
            },
            {
              "internalType": "contract AccQueue",
              "name": "messageAq",
              "type": "address"
            },
            {
              "internalType": "contract TopupCredit",
              "name": "topupCredit",
              "type": "address"
            }
          ],
          "internalType": "struct Params.ExtContracts",
          "name": "_extContracts",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidBatchLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaciPubKeyLargerThanSnarkFieldSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PollAlreadyInit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StateAqAlreadyMerged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StateAqSubtreesNeedMerge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyMessages",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VotingPeriodNotOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VotingPeriodOver",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stateRoot",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_numSignups",
          "type": "uint256"
        }
      ],
      "name": "MergeMaciStateAq",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_numSrQueueOps",
          "type": "uint256"
        }
      ],
      "name": "MergeMaciStateAqSubRoots",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_messageRoot",
          "type": "uint256"
        }
      ],
      "name": "MergeMessageAq",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_numSrQueueOps",
          "type": "uint256"
        }
      ],
      "name": "MergeMessageAqSubRoots",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgType",
              "type": "uint256"
            },
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "indexed": false,
          "internalType": "struct DomainObjs.Message",
          "name": "_message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct DomainObjs.PubKey",
          "name": "_encPubKey",
          "type": "tuple"
        }
      ],
      "name": "PublishMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgType",
              "type": "uint256"
            },
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "indexed": false,
          "internalType": "struct DomainObjs.Message",
          "name": "_message",
          "type": "tuple"
        }
      ],
      "name": "TopupMessage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coordinatorPubKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coordinatorPubKeyHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSbCommitment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extContracts",
      "outputs": [
        {
          "internalType": "contract IMACI",
          "name": "maci",
          "type": "address"
        },
        {
          "internalType": "contract AccQueue",
          "name": "messageAq",
          "type": "address"
        },
        {
          "internalType": "contract TopupCredit",
          "name": "topupCredit",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployTimeAndDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pollDeployTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pollDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "array",
          "type": "uint256[2]"
        }
      ],
      "name": "hash2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "array",
          "type": "uint256[3]"
        }
      ],
      "name": "hash3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "array",
          "type": "uint256[4]"
        }
      ],
      "name": "hash4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "array",
          "type": "uint256[5]"
        }
      ],
      "name": "hash5",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "left",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "right",
          "type": "uint256"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgType",
              "type": "uint256"
            },
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message",
          "name": "_message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_encPubKey",
          "type": "tuple"
        }
      ],
      "name": "hashMessageAndEncPubKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "msgHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DomainObjs.PubKey",
              "name": "pubKey",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "voiceCreditBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.StateLeaf",
          "name": "_stateLeaf",
          "type": "tuple"
        }
      ],
      "name": "hashStateLeaf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ciphertext",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxMessages",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxVoteOptions",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "mergeMaciStateAq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numSrQueueOps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "mergeMaciStateAqSubRoots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mergeMessageAq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numSrQueueOps",
          "type": "uint256"
        }
      ],
      "name": "mergeMessageAqSubRoots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mergedStateRoot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numMessages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSignUpsAndMessages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numSUps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numMsgs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSignups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "dataToPad",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "msgType",
          "type": "uint256"
        }
      ],
      "name": "padAndHashMessage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgType",
              "type": "uint256"
            },
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message",
          "name": "message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "padKey",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "msgHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgType",
              "type": "uint256"
            },
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message",
          "name": "_message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_encPubKey",
          "type": "tuple"
        }
      ],
      "name": "publishMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "msgType",
              "type": "uint256"
            },
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message[]",
          "name": "_messages",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey[]",
          "name": "_encPubKeys",
          "type": "tuple[]"
        }
      ],
      "name": "publishMessageBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "setFinish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "array",
          "type": "uint256[]"
        }
      ],
      "name": "sha256Hash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateAqMerged",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "topup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treeDepths",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "intStateTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "messageTreeSubDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "messageTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "voteOptionTreeDepth",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x10588828b5b3d2b4a53b9ce928c7a2f51fda7c3c5b8f1184d7f1d6c5ad71ba58",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0x379f55d1c88C41Cb449dC8Cb664fE5a4490e9049",
    "transactionIndex": 0,
    "gasUsed": "2178502",
    "logsBloom": "0x
    "blockHash": "0x58d491761ae079176fc54e7a1b8a36d886ef59f8c7a1dd075b8673a2cce411da",
    "transactionHash": "0x10588828b5b3d2b4a53b9ce928c7a2f51fda7c3c5b8f1184d7f1d6c5ad71ba58",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12364735,
        "transactionHash": "0x10588828b5b3d2b4a53b9ce928c7a2f51fda7c3c5b8f1184d7f1d6c5ad71ba58",
        "address": "0x0000000000000000000000000000000000007005",
        "topics": [
          "0x33c981baba081f8fd2c52ac6ad1ea95b6814b4376640f55689051f6584729688",
          "0x0000000000000000000000002a1f5eb3e84e58e6f1e565306298b9de1273f203"
        ],
        "data": "0x000000000000000000000000379f55d1c88c41cb449dc8cb664fe5a4490e9049",
        "logIndex": 0,
        "blockHash": "0x58d491761ae079176fc54e7a1b8a36d886ef59f8c7a1dd075b8673a2cce411da"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12364735,
        "transactionHash": "0x10588828b5b3d2b4a53b9ce928c7a2f51fda7c3c5b8f1184d7f1d6c5ad71ba58",
        "address": "0x379f55d1c88C41Cb449dC8Cb664fE5a4490e9049",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002a1f5eb3e84e58e6f1e565306298b9de1273f203"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x58d491761ae079176fc54e7a1b8a36d886ef59f8c7a1dd075b8673a2cce411da"
      }
    ],
    "blockNumber": 12364735,
    "cumulativeGasUsed": "2178502",
    "status": 1,
    "byzantium": true
  },
  "args": [
    60000,
    {
      "maxMessages": 100,
      "maxVoteOptions": 200
    },
    {
      "intStateTreeDepth": 2,
      "messageTreeSubDepth": 1,
      "messageTreeDepth": 2,
      "voteOptionTreeDepth": 2
    },
    {
      "x": "12576093200411987947686257994143214436501205651693395648371401820630112038269",
      "y": "19289738249397520911803584405588619261458344140979840364938137196359352374305"
    },
    {
      "maci": "0xDCB5008c6074bEB53317027534431b2c75B77eD4",
      "messageAq": "0xe63D576Dbff811650F9823a63Ed05DEfE5f43533",
      "topupCredit": "0xe63D576Dbff811650F9823a63Ed05DEfE5f43533"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "227c018199e049294919322249979298",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxMessages\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVoteOptions\",\"type\":\"uint256\"}],\"internalType\":\"struct Params.MaxValues\",\"name\":\"_maxValues\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IMACI\",\"name\":\"maci\",\"type\":\"address\"},{\"internalType\":\"contract AccQueue\",\"name\":\"messageAq\",\"type\":\"address\"},{\"internalType\":\"contract TopupCredit\",\"name\":\"topupCredit\",\"type\":\"address\"}],\"internalType\":\"struct Params.ExtContracts\",\"name\":\"_extContracts\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidBatchLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaciPubKeyLargerThanSnarkFieldSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PollAlreadyInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StateAqAlreadyMerged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StateAqSubtreesNeedMerge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyMessages\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingPeriodNotOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingPeriodOver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stateRoot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numSignups\",\"type\":\"uint256\"}],\"name\":\"MergeMaciStateAq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numSrQueueOps\",\"type\":\"uint256\"}],\"name\":\"MergeMaciStateAqSubRoots\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_messageRoot\",\"type\":\"uint256\"}],\"name\":\"MergeMessageAq\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numSrQueueOps\",\"type\":\"uint256\"}],\"name\":\"MergeMessageAqSubRoots\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"msgType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"indexed\":false,\"internalType\":\"struct DomainObjs.Message\",\"name\":\"_message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_encPubKey\",\"type\":\"tuple\"}],\"name\":\"PublishMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"msgType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"indexed\":false,\"internalType\":\"struct DomainObjs.Message\",\"name\":\"_message\",\"type\":\"tuple\"}],\"name\":\"TopupMessage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinatorPubKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinatorPubKeyHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSbCommitment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extContracts\",\"outputs\":[{\"internalType\":\"contract IMACI\",\"name\":\"maci\",\"type\":\"address\"},{\"internalType\":\"contract AccQueue\",\"name\":\"messageAq\",\"type\":\"address\"},{\"internalType\":\"contract TopupCredit\",\"name\":\"topupCredit\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployTimeAndDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pollDeployTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pollDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"array\",\"type\":\"uint256[2]\"}],\"name\":\"hash2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"array\",\"type\":\"uint256[3]\"}],\"name\":\"hash3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"array\",\"type\":\"uint256[4]\"}],\"name\":\"hash4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"array\",\"type\":\"uint256[5]\"}],\"name\":\"hash5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"msgType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message\",\"name\":\"_message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_encPubKey\",\"type\":\"tuple\"}],\"name\":\"hashMessageAndEncPubKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"msgHash\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"voiceCreditBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.StateLeaf\",\"name\":\"_stateLeaf\",\"type\":\"tuple\"}],\"name\":\"hashStateLeaf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ciphertext\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMessages\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVoteOptions\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"mergeMaciStateAq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numSrQueueOps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"mergeMaciStateAqSubRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mergeMessageAq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numSrQueueOps\",\"type\":\"uint256\"}],\"name\":\"mergeMessageAqSubRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mergedStateRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSignUpsAndMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numSUps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numMsgs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSignups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"dataToPad\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"msgType\",\"type\":\"uint256\"}],\"name\":\"padAndHashMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"msgType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"padKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"msgHash\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"msgType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message\",\"name\":\"_message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_encPubKey\",\"type\":\"tuple\"}],\"name\":\"publishMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"msgType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message[]\",\"name\":\"_messages\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey[]\",\"name\":\"_encPubKeys\",\"type\":\"tuple[]\"}],\"name\":\"publishMessageBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setFinish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"array\",\"type\":\"uint256[]\"}],\"name\":\"sha256Hash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateAqMerged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treeDepths\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Do not deploy this directly. Use PollFactory.deploy() which performs some checks on the Poll constructor arguments.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_coordinatorPubKey\":\"The coordinator's public key\",\"_duration\":\"The duration of the voting period, in seconds\",\"_extContracts\":\"The external contracts\",\"_maxValues\":\"The maximum number of messages and vote options\",\"_treeDepths\":\"The depths of the merkle trees\"}},\"getDeployTimeAndDuration()\":{\"returns\":{\"pollDeployTime\":\"The deployment timestamp\",\"pollDuration\":\"The duration of the poll\"}},\"hash2(uint256[2])\":{\"params\":{\"array\":\"An array of two uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the two elements.\"}},\"hash3(uint256[3])\":{\"params\":{\"array\":\"An array of three uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the three elements.\"}},\"hash4(uint256[4])\":{\"params\":{\"array\":\"An array of four uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the four elements.\"}},\"hash5(uint256[5])\":{\"params\":{\"array\":\"An array of five uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the five elements.\"}},\"hashLeftRight(uint256,uint256)\":{\"params\":{\"left\":\"the first element to hash.\",\"right\":\"the second element to hash.\"},\"returns\":{\"result\":\"The Poseidon hash of the two elements.\"}},\"hashMessageAndEncPubKey((uint256,uint256[10]),(uint256,uint256))\":{\"params\":{\"_encPubKey\":\"the encryption public key to be hashed\",\"_message\":\"the message to be hashed\"},\"returns\":{\"msgHash\":\"The hash of the message and the encryption public key\"}},\"hashStateLeaf(((uint256,uint256),uint256,uint256))\":{\"params\":{\"_stateLeaf\":\"the state leaf to be hashed\"},\"returns\":{\"ciphertext\":\"The hash of the state leaf\"}},\"init()\":{\"details\":\"Should be called immediately after Poll creation and messageAq ownership transferred\"},\"mergeMaciStateAq(uint256)\":{\"params\":{\"_pollId\":\"The ID of the active Poll\"}},\"mergeMaciStateAqSubRoots(uint256,uint256)\":{\"params\":{\"_numSrQueueOps\":\"Number of operations\",\"_pollId\":\"The ID of the active Poll\"}},\"mergeMessageAqSubRoots(uint256)\":{\"params\":{\"_numSrQueueOps\":\"The number of subroot queue operations to perform\"}},\"numSignUpsAndMessages()\":{\"returns\":{\"numMsgs\":\"The number of messages sent by voters\",\"numSUps\":\"The number of signups\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"padAndHashMessage(uint256[2],uint256)\":{\"params\":{\"dataToPad\":\"the data to be padded\",\"msgType\":\"the type of the message\"},\"returns\":{\"message\":\"The padded message\",\"msgHash\":\"The hash of the padded message and encryption key\",\"padKey\":\"The padding public key\"}},\"publishMessage((uint256,uint256[10]),(uint256,uint256))\":{\"params\":{\"_encPubKey\":\"An epheremal public key which can be combined with the coordinator's private key to generate an ECDH shared key with which to encrypt the message.\",\"_message\":\"The message to publish\"}},\"publishMessageBatch((uint256,uint256[10])[],(uint256,uint256)[])\":{\"details\":\"Can only be submitted before the voting deadline\",\"params\":{\"_encPubKeys\":\"the encrypted public keys\",\"_messages\":\"the messages\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sha256Hash(uint256[])\":{\"params\":{\"array\":\"The array of uint256 elements.\"},\"returns\":{\"result\":\"The SHA256 hash of the array.\"}},\"topup(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of credits to topup\",\"stateIndex\":\"The index of user in the state queue\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Poll\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidMessage()\":[{\"notice\":\"custom errors\"}]},\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"},\"constructor\":{\"notice\":\"Each MACI instance can have multiple Polls. When a Poll is deployed, its voting period starts immediately.\"},\"coordinatorPubKey()\":{\"notice\":\"The coordinator's public key\"},\"coordinatorPubKeyHash()\":{\"notice\":\"Hash of the coordinator's public key\"},\"currentSbCommitment()\":{\"notice\":\"Get the commitment to the state leaves and the ballots. This is hash3(stateRoot, ballotRoot, salt). Its initial value should be hash(maciStateRootSnapshot, emptyBallotRoot, 0) Each successful invocation of processMessages() should use a different salt to update this value, so that an external observer cannot tell in the case that none of the messages are valid.\"},\"extContracts()\":{\"notice\":\"The contracts used by the Poll\"},\"getDeployTimeAndDuration()\":{\"notice\":\"Returns the Poll's deploy time and duration\"},\"hash2(uint256[2])\":{\"notice\":\"Computes the Poseidon hash of two uint256 elements.\"},\"hash3(uint256[3])\":{\"notice\":\"Computes the Poseidon hash of three uint256 elements.\"},\"hash4(uint256[4])\":{\"notice\":\"Computes the Poseidon hash of four uint256 elements.\"},\"hash5(uint256[5])\":{\"notice\":\"Computes the Poseidon hash of five uint256 elements.\"},\"hashLeftRight(uint256,uint256)\":{\"notice\":\"Computes the Poseidon hash of two uint256 elements.\"},\"hashMessageAndEncPubKey((uint256,uint256[10]),(uint256,uint256))\":{\"notice\":\"An utility function used to hash a MACI message and an encryption public key\"},\"hashStateLeaf(((uint256,uint256),uint256,uint256))\":{\"notice\":\"An utility function used to hash a state leaf\"},\"init()\":{\"notice\":\"The initialization function.\"},\"maxValues()\":{\"notice\":\"Max values for the poll\"},\"mergeMaciStateAq(uint256)\":{\"notice\":\"The second step of merging the MACI state AccQueue. This allows the ProcessMessages circuit to access the latest state tree and ballots via currentSbCommitment.\"},\"mergeMaciStateAqSubRoots(uint256,uint256)\":{\"notice\":\"The first step of merging the MACI state AccQueue. This allows the ProcessMessages circuit to access the latest state tree and ballots via currentSbCommitment.\"},\"mergeMessageAq()\":{\"notice\":\"The second step in merging the message AccQueue so that the ProcessMessages circuit can access the message root.\"},\"mergeMessageAqSubRoots(uint256)\":{\"notice\":\"The first step in merging the message AccQueue so that the ProcessMessages circuit can access the message root.\"},\"mergedStateRoot()\":{\"notice\":\"the state root of the state merkle tree\"},\"numMessages()\":{\"notice\":\"The number of messages that have been published\"},\"numSignUpsAndMessages()\":{\"notice\":\"The number of messages which have been processed and the number of signups\"},\"numSignups()\":{\"notice\":\"The number of signups that have been processed before the Poll ended (stateAq merged)\"},\"padAndHashMessage(uint256[2],uint256)\":{\"notice\":\"An utility function used to pad and hash a MACI message\"},\"publishMessage((uint256,uint256[10]),(uint256,uint256))\":{\"notice\":\"Allows anyone to publish a message (an encrypted command and signature). This function also enqueues the message.\"},\"publishMessageBatch((uint256,uint256[10])[],(uint256,uint256)[])\":{\"notice\":\"submit a message batch\"},\"sha256Hash(uint256[])\":{\"notice\":\"Computes the SHA256 hash of an array of uint256 elements.\"},\"stateAqMerged()\":{\"notice\":\"Whether the MACI contract's stateAq has been merged by this contract\"},\"topup(uint256,uint256)\":{\"notice\":\"Allows to publish a Topup message\"},\"treeDepths()\":{\"notice\":\"Depths of the merkle trees\"}},\"notice\":\"A Poll contract allows voters to submit encrypted messages which can be either votes, key change messages or topup messages.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Poll.sol\":\"Poll\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Poll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { SnarkCommon } from \\\"./crypto/SnarkCommon.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { EmptyBallotRoots } from \\\"./trees/EmptyBallotRoots.sol\\\";\\nimport { IPoll } from \\\"./interfaces/IPoll.sol\\\";\\nimport { Utilities } from \\\"./utilities/Utilities.sol\\\";\\n\\n/// @title Poll\\n/// @notice A Poll contract allows voters to submit encrypted messages\\n/// which can be either votes, key change messages or topup messages.\\n/// @dev Do not deploy this directly. Use PollFactory.deploy() which performs some\\n/// checks on the Poll constructor arguments.\\ncontract Poll is Params, Utilities, SnarkCommon, Ownable, EmptyBallotRoots, IPoll {\\n  using SafeERC20 for ERC20;\\n\\n  /// @notice Whether the Poll has been initialized\\n  bool internal isInit;\\n\\n  /// @notice The coordinator's public key\\n  PubKey public coordinatorPubKey;\\n\\n  /// @notice Hash of the coordinator's public key\\n  uint256 public immutable coordinatorPubKeyHash;\\n\\n  /// @notice the state root of the state merkle tree\\n  uint256 public mergedStateRoot;\\n\\n  // The timestamp of the block at which the Poll was deployed\\n  uint256 internal immutable deployTime;\\n\\n  // The duration of the polling period, in seconds\\n  uint256 internal immutable duration;\\n\\n  /// @notice Whether the MACI contract's stateAq has been merged by this contract\\n  bool public stateAqMerged;\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  uint256 public currentSbCommitment;\\n\\n  /// @notice The number of messages that have been published\\n  uint256 public numMessages;\\n\\n  /// @notice The number of signups that have been processed\\n  /// before the Poll ended (stateAq merged)\\n  uint256 public numSignups;\\n\\n  /// @notice Max values for the poll\\n  MaxValues public maxValues;\\n\\n  /// @notice Depths of the merkle trees\\n  TreeDepths public treeDepths;\\n\\n  /// @notice The contracts used by the Poll\\n  ExtContracts public extContracts;\\n\\n  bool public finished = false;\\n\\n  error VotingPeriodOver();\\n  error VotingPeriodNotOver();\\n  error PollAlreadyInit();\\n  error TooManyMessages();\\n  error MaciPubKeyLargerThanSnarkFieldSize();\\n  error StateAqAlreadyMerged();\\n  error StateAqSubtreesNeedMerge();\\n  error InvalidBatchLength();\\n\\n  event PublishMessage(Message _message, PubKey _encPubKey);\\n  event TopupMessage(Message _message);\\n  event MergeMaciStateAqSubRoots(uint256 _numSrQueueOps);\\n  event MergeMaciStateAq(uint256 _stateRoot, uint256 _numSignups);\\n  event MergeMessageAqSubRoots(uint256 _numSrQueueOps);\\n  event MergeMessageAq(uint256 _messageRoot);\\n\\n  /// @notice Each MACI instance can have multiple Polls.\\n  /// When a Poll is deployed, its voting period starts immediately.\\n  /// @param _duration The duration of the voting period, in seconds\\n  /// @param _maxValues The maximum number of messages and vote options\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _extContracts The external contracts\\n  constructor(\\n    uint256 _duration,\\n    MaxValues memory _maxValues,\\n    TreeDepths memory _treeDepths,\\n    PubKey memory _coordinatorPubKey,\\n    ExtContracts memory _extContracts\\n  ) payable {\\n    // check that the coordinator public key is valid\\n    if (_coordinatorPubKey.x >= SNARK_SCALAR_FIELD || _coordinatorPubKey.y >= SNARK_SCALAR_FIELD) {\\n      revert MaciPubKeyLargerThanSnarkFieldSize();\\n    }\\n\\n    // store the pub key as object then calculate the hash\\n    coordinatorPubKey = _coordinatorPubKey;\\n    // we hash it ourselves to ensure we store the correct value\\n    coordinatorPubKeyHash = hashLeftRight(_coordinatorPubKey.x, _coordinatorPubKey.y);\\n    // store the external contracts to interact with\\n    extContracts = _extContracts;\\n    // store duration of the poll\\n    duration = _duration;\\n    // store max values\\n    maxValues = _maxValues;\\n    // store tree depth\\n    treeDepths = _treeDepths;\\n    // Record the current timestamp\\n    deployTime = block.timestamp;\\n  }\\n\\n  /// @notice A modifier that causes the function to revert if the voting period is\\n  /// not over.\\n  modifier isAfterVotingDeadline() {\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    // if (secondsPassed <= duration) revert VotingPeriodNotOver();\\n    if (finished == false) revert VotingPeriodNotOver();\\n    _;\\n  }\\n\\n  /// @notice A modifier that causes the function to revert if the voting period is\\n  /// over\\n  modifier isWithinVotingDeadline() {\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    // if (secondsPassed >= duration) revert VotingPeriodOver();\\n    if(finished == true) revert VotingPeriodOver();\\n    _;\\n  }\\n\\n  /// @notice The initialization function.\\n  /// @dev Should be called immediately after Poll creation\\n  /// and messageAq ownership transferred\\n  function init() public {\\n    if (isInit) revert PollAlreadyInit();\\n    // set to true so it cannot be called again\\n    isInit = true;\\n\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    // init messageAq here by inserting placeholderLeaf\\n    uint256[2] memory dat = [NOTHING_UP_MY_SLEEVE, 0];\\n\\n    (Message memory _message, PubKey memory _padKey, uint256 placeholderLeaf) = padAndHashMessage(dat, 1);\\n    extContracts.messageAq.enqueue(placeholderLeaf);\\n\\n    emit PublishMessage(_message, _padKey);\\n  }\\n\\n  function setFinish(bool state) public  {\\n    finished = state;\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function topup(uint256 stateIndex, uint256 amount) public virtual isWithinVotingDeadline {\\n    // we check that we do not exceed the max number of messages\\n    if (numMessages >= maxValues.maxMessages) revert TooManyMessages();\\n\\n    // cannot realistically overflow\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    /// @notice topupCredit is a trusted token contract which reverts if the transfer fails\\n    extContracts.topupCredit.transferFrom(msg.sender, address(this), amount);\\n\\n    uint256[2] memory dat = [stateIndex, amount];\\n    (Message memory _message, , uint256 messageLeaf) = padAndHashMessage(dat, 2);\\n\\n    extContracts.messageAq.enqueue(messageLeaf);\\n\\n    emit TopupMessage(_message);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function publishMessage(Message memory _message, PubKey calldata _encPubKey) public virtual isWithinVotingDeadline {\\n    // we check that we do not exceed the max number of messages\\n    if (numMessages >= maxValues.maxMessages) revert TooManyMessages();\\n\\n    // validate that the public key is valid\\n    if (_encPubKey.x >= SNARK_SCALAR_FIELD || _encPubKey.y >= SNARK_SCALAR_FIELD) {\\n      revert MaciPubKeyLargerThanSnarkFieldSize();\\n    }\\n\\n    // cannot realistically overflow\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    // we enforce that msgType here is 1 so we don't need checks\\n    // at the circuit level\\n    _message.msgType = 1;\\n\\n    uint256 messageLeaf = hashMessageAndEncPubKey(_message, _encPubKey);\\n    extContracts.messageAq.enqueue(messageLeaf);\\n\\n    emit PublishMessage(_message, _encPubKey);\\n  }\\n\\n  /// @notice submit a message batch\\n  /// @dev Can only be submitted before the voting deadline\\n  /// @param _messages the messages\\n  /// @param _encPubKeys the encrypted public keys\\n  function publishMessageBatch(Message[] calldata _messages, PubKey[] calldata _encPubKeys) external {\\n    if (_messages.length != _encPubKeys.length) {\\n      revert InvalidBatchLength();\\n    }\\n\\n    uint256 len = _messages.length;\\n    for (uint256 i = 0; i < len; ) {\\n      // an event will be published by this function already\\n      publishMessage(_messages[i], _encPubKeys[i]);\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) public onlyOwner isAfterVotingDeadline {\\n    // This function cannot be called after the stateAq was merged\\n    if (stateAqMerged) revert StateAqAlreadyMerged();\\n\\n    // merge subroots\\n    extContracts.maci.mergeStateAqSubRoots(_numSrQueueOps, _pollId);\\n\\n    emit MergeMaciStateAqSubRoots(_numSrQueueOps);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMaciStateAq(uint256 _pollId) public onlyOwner isAfterVotingDeadline {\\n    // This function can only be called once per Poll after the voting\\n    // deadline\\n    if (stateAqMerged) revert StateAqAlreadyMerged();\\n\\n    // set merged to true so it cannot be called again\\n    stateAqMerged = true;\\n\\n    // the subtrees must have been merged first\\n    if (!extContracts.maci.stateAq().subTreesMerged()) revert StateAqSubtreesNeedMerge();\\n\\n    mergedStateRoot = extContracts.maci.mergeStateAq(_pollId);\\n\\n    // Set currentSbCommitment\\n    uint256[3] memory sb;\\n    sb[0] = mergedStateRoot;\\n    sb[1] = emptyBallotRoots[treeDepths.voteOptionTreeDepth - 1];\\n    sb[2] = uint256(0);\\n\\n    currentSbCommitment = hash3(sb);\\n\\n    numSignups = extContracts.maci.numSignUps();\\n    emit MergeMaciStateAq(mergedStateRoot, numSignups);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) public onlyOwner isAfterVotingDeadline {\\n    extContracts.messageAq.mergeSubRoots(_numSrQueueOps);\\n    emit MergeMessageAqSubRoots(_numSrQueueOps);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMessageAq() public onlyOwner isAfterVotingDeadline {\\n    uint256 root = extContracts.messageAq.merge(treeDepths.messageTreeDepth);\\n    emit MergeMessageAq(root);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function getDeployTimeAndDuration() public view returns (uint256 pollDeployTime, uint256 pollDuration) {\\n    pollDeployTime = deployTime;\\n    pollDuration = duration;\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function numSignUpsAndMessages() public view returns (uint256 numSUps, uint256 numMsgs) {\\n    numSUps = numSignups;\\n    numMsgs = numMessages;\\n  }\\n}\\n\",\"keccak256\":\"0x610e6ed31e211f17bac43d32100f26a1c556a235ce0c7e1c21bd832c4749afba\",\"license\":\"MIT\"},\"contracts/TopupCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TopupCredit\\n/// @notice A contract representing a token used to topup a MACI's voter\\n/// credits\\ncontract TopupCredit is ERC20, Ownable {\\n  uint8 public constant DECIMALS = 1;\\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\\n\\n  /// @notice custom errors\\n  error ExceedLimit();\\n\\n  /// @notice create  a new TopupCredit token\\n  constructor() payable ERC20(\\\"TopupCredit\\\", \\\"TopupCredit\\\") {}\\n\\n  /// @notice mint tokens to an account\\n  /// @param account the account to mint tokens to\\n  /// @param amount the amount of tokens to mint\\n  function airdropTo(address account, uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(account, amount);\\n  }\\n\\n  /// @notice mint tokens to the contract owner\\n  /// @param amount the amount of tokens to mint\\n  function airdrop(uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x088cf42d9b7eb3cc3606131bd810feb9edc9b3c78219c0088e6ae6a44632d6a1\",\"license\":\"MIT\"},\"contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x64a6181ac6e0df316ab26432098f6fc48b2d356f2397d3886f887a13446c7137\",\"license\":\"MIT\"},\"contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1 = [a1, b1, c1, d1];\\n    G2Point[4] memory p2 = [a2, b2, c2, d2];\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint256 i = 0; i < 4; i++) {\\n      uint256 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x5ce2f85d56cec9a08960ebf54fe89a0867deb7f97d3151699ba238848598a1a4\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xfff415a7054b60f0826d0f731aa47b8edf59a1ae485a803ca73b3280855a5cdf\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xa5422f08624b09ec1766b8d36ea527ec8af3f76121fa136846a9adc9ea3cc717\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xb27ffc3b4c053ab97006c9d2d634e326a101926f0f704d456cec3d33e5757cc5\",\"license\":\"MIT\"},\"contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x7e378eb768102153e5153b6f0f8bb08732d6950d0be09d5563973a31cc844fea\",\"license\":\"MIT\"},\"contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0xdccb710f060330d75763c92bd6828dd2cc891c3ea5a30ce30ae221c177a7eba7\",\"license\":\"MIT\"},\"contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xea489c5ac94d4f25f6255dbfeed0388c2841ead6d9d5e52a19bc8dd2c27b4d21\",\"license\":\"MIT\"},\"contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateAqRoot() external view returns (uint256);\\n\\n  /// @notice Allow Poll contracts to merge the state subroots\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice Allow Poll contracts to merge the state root\\n  /// @param _pollId The active Poll ID\\n  /// @return The calculated Merkle root\\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n\\n  /// @notice Get the state AccQueue\\n  /// @return The state AccQueue\\n  function stateAq() external view returns (AccQueue);\\n}\\n\",\"keccak256\":\"0x5046e3e06d927152c6cea0e910af0542bc0178381fd3d9e43b2023ca8ba2f3eb\",\"license\":\"MIT\"},\"contracts/interfaces/IPoll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\nimport { IMACI } from \\\"./IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title IPoll\\n/// @notice Poll interface\\ninterface IPoll {\\n  /// @notice The number of messages which have been processed and the number of signups\\n  /// @return numSignups The number of signups\\n  /// @return numMsgs The number of messages sent by voters\\n  function numSignUpsAndMessages() external view returns (uint256 numSignups, uint256 numMsgs);\\n\\n  /// @notice Allows to publish a Topup message\\n  /// @param stateIndex The index of user in the state queue\\n  /// @param amount The amount of credits to topup\\n  function topup(uint256 stateIndex, uint256 amount) external;\\n\\n  /// @notice Allows anyone to publish a message (an encrypted command and signature).\\n  /// This function also enqueues the message.\\n  /// @param _message The message to publish\\n  /// @param _encPubKey An epheremal public key which can be combined with the\\n  /// coordinator's private key to generate an ECDH shared key with which\\n  /// to encrypt the message.\\n  function publishMessage(DomainObjs.Message memory _message, DomainObjs.PubKey calldata _encPubKey) external;\\n\\n  /// @notice The first step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice The second step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAq(uint256 _pollId) external;\\n\\n  /// @notice The first step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  /// @param _numSrQueueOps The number of subroot queue operations to perform\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) external;\\n\\n  /// @notice The second step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  function mergeMessageAq() external;\\n\\n  /// @notice Returns the Poll's deploy time and duration\\n  /// @return _deployTime The deployment timestamp\\n  /// @return _duration The duration of the poll\\n  function getDeployTimeAndDuration() external view returns (uint256 _deployTime, uint256 _duration);\\n\\n  /// @notice Get the result of whether the MACI contract's stateAq has been merged by this contract\\n  /// @return Whether the MACI contract's stateAq has been merged by this contract\\n  function stateAqMerged() external view returns (bool);\\n\\n  /// @notice Get the depths of the merkle trees\\n  /// @return intStateTreeDepth The depth of the state tree\\n  /// @return messageTreeSubDepth The subdepth of the message tree\\n  /// @return messageTreeDepth The depth of the message tree\\n  /// @return voteOptionTreeDepth The subdepth of the vote option tree\\n  function treeDepths()\\n    external\\n    view\\n    returns (uint8 intStateTreeDepth, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth);\\n\\n  /// @notice Get the max values for the poll\\n  /// @return maxMessages The maximum number of messages\\n  /// @return maxVoteOptions The maximum number of vote options\\n  function maxValues() external view returns (uint256 maxMessages, uint256 maxVoteOptions);\\n\\n  /// @notice Get the external contracts\\n  /// @return maci The IMACI contract\\n  /// @return messageAq The AccQueue contract\\n  /// @return topupCredit The TopupCredit contract\\n  function extContracts() external view returns (IMACI maci, AccQueue messageAq, TopupCredit topupCredit);\\n\\n  /// @notice Get the hash of coordinator's public key\\n  /// @return _coordinatorPubKeyHash the hash of coordinator's public key\\n  function coordinatorPubKeyHash() external view returns (uint256 _coordinatorPubKeyHash);\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  /// @return The commitment to the state leaves and the ballots\\n  function currentSbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6543c65572462d7e052503a4094a1900a12cb450ed91f097bed1e8d97ad0243c\",\"license\":\"MIT\"},\"contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable, Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros ony if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0x57891d1deb4f1a8e44debf1cd6b96d9e557a9f58ca9ebd9f90faa4589d47945c\",\"license\":\"MIT\"},\"contracts/trees/EmptyBallotRoots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract EmptyBallotRoots {\\n  // emptyBallotRoots contains the roots of Ballot trees of five leaf\\n  // configurations.\\n  // Each tree has a depth of 10, which is the hardcoded state tree depth.\\n  // Each leaf is an empty ballot. A configuration refers to the depth of the\\n  // voice option tree for that ballot.\\n\\n  // The leaf for the root at index 0 contains hash(0, root of a VO tree with\\n  // depth 1 and zero-value 0)\\n\\n  // The leaf for the root at index 1 contains hash(0, root of a VO tree with\\n  // depth 2 and zero-value 0)\\n\\n  // ... and so on.\\n\\n  // The first parameter to the hash function is the nonce, which is 0.\\n\\n  uint256[5] internal emptyBallotRoots;\\n\\n  constructor() {\\n    emptyBallotRoots[0] = uint256(6579820437991406069687396372962263845395426835385368878767605633903648955255);\\n    emptyBallotRoots[1] = uint256(9105453741665960449792281626882014222103501499246287334255160659262747058842);\\n    emptyBallotRoots[2] = uint256(14830222164980158319423900821611648302565544940504586015002280367515043751869);\\n    emptyBallotRoots[3] = uint256(12031563002271722465187541954825013132282571927669361737331626664787916495335);\\n    emptyBallotRoots[4] = uint256(5204612805325639173251450278876337947880680931527922506745154187077640790699);\\n  }\\n}\\n\",\"keccak256\":\"0xf9430abe96d1d55dff8eeb43f62b01a607267c1e033779631528b2275dd63e81\",\"license\":\"MIT\"},\"contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\\n  struct Message {\\n    uint256 msgType;\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x2d6a390a36a2e95985959cd1ef5b896c6dfedad01c09154674b2ff48e54785bb\",\"license\":\"MIT\"},\"contracts/utilities/Params.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IMACI } from \\\"../interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title Params\\n/// @notice This contracts contains a number of structures\\n/// which are to be passed as parameters to Poll contracts.\\n/// This way we can reduce the number of parameters\\n/// and avoid a stack too deep error during compilation.\\ncontract Params {\\n  /// @notice A struct holding the depths of the merkle trees\\n  struct TreeDepths {\\n    uint8 intStateTreeDepth;\\n    uint8 messageTreeSubDepth;\\n    uint8 messageTreeDepth;\\n    uint8 voteOptionTreeDepth;\\n  }\\n\\n  /// @notice A struct holding the max values for the poll\\n  struct MaxValues {\\n    uint256 maxMessages;\\n    uint256 maxVoteOptions;\\n  }\\n\\n  /// @notice A struct holding the external contracts\\n  /// that are to be passed to a Poll contract on\\n  /// deployment\\n  struct ExtContracts {\\n    IMACI maci;\\n    AccQueue messageAq;\\n    TopupCredit topupCredit;\\n  }\\n}\\n\",\"keccak256\":\"0x10c725c49e9193b7641574733666e231886e2ccc301c755e1dd9567aff7c5c9c\",\"license\":\"MIT\"},\"contracts/utilities/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { DomainObjs } from \\\"./DomainObjs.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\nimport { SnarkConstants } from \\\"../crypto/SnarkConstants.sol\\\";\\n\\n/// @title Utilities\\n/// @notice An utility contract that can be used to:\\n/// * hash a state leaf\\n/// * pad and hash a MACI message\\n/// * hash a MACI message and an encryption public key\\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\\n  /// @notice custom errors\\n  error InvalidMessage();\\n\\n  /// @notice An utility function used to hash a state leaf\\n  /// @param _stateLeaf the state leaf to be hashed\\n  /// @return ciphertext The hash of the state leaf\\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\\n    uint256[4] memory plaintext;\\n    plaintext[0] = _stateLeaf.pubKey.x;\\n    plaintext[1] = _stateLeaf.pubKey.y;\\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\\n    plaintext[3] = _stateLeaf.timestamp;\\n\\n    ciphertext = hash4(plaintext);\\n  }\\n\\n  /// @notice An utility function used to pad and hash a MACI message\\n  /// @param dataToPad the data to be padded\\n  /// @param msgType the type of the message\\n  /// @return message The padded message\\n  /// @return padKey The padding public key\\n  /// @return msgHash The hash of the padded message and encryption key\\n  function padAndHashMessage(\\n    uint256[2] memory dataToPad,\\n    uint256 msgType\\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\\n    // add data and pad it to 10 elements (automatically cause it's the default value)\\n    uint256[10] memory dat;\\n    dat[0] = dataToPad[0];\\n    dat[1] = dataToPad[1];\\n\\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\\n    message = Message({ msgType: msgType, data: dat });\\n    msgHash = hashMessageAndEncPubKey(message, padKey);\\n  }\\n\\n  /// @notice An utility function used to hash a MACI message and an encryption public key\\n  /// @param _message the message to be hashed\\n  /// @param _encPubKey the encryption public key to be hashed\\n  /// @return msgHash The hash of the message and the encryption public key\\n  function hashMessageAndEncPubKey(\\n    Message memory _message,\\n    PubKey memory _encPubKey\\n  ) public pure returns (uint256 msgHash) {\\n    if (_message.data.length != 10) {\\n      revert InvalidMessage();\\n    }\\n\\n    uint256[5] memory n;\\n    n[0] = _message.data[0];\\n    n[1] = _message.data[1];\\n    n[2] = _message.data[2];\\n    n[3] = _message.data[3];\\n    n[4] = _message.data[4];\\n\\n    uint256[5] memory m;\\n    m[0] = _message.data[5];\\n    m[1] = _message.data[6];\\n    m[2] = _message.data[7];\\n    m[3] = _message.data[8];\\n    m[4] = _message.data[9];\\n\\n    msgHash = hash5([_message.msgType, hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\\n  }\\n}\\n\",\"keccak256\":\"0x6dabe0385409cf4dc4a22b80b7483c26d016c4173e5f62930e06085f02d91c09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060408190526014805460ff1916905562002567388190039081908339810160408190526200002f9162000459565b6200003a3362000246565b7f0e8c0be063e1dee5a8a9df19f0715acdfac6b7260f41d6c3769166cac049db776001557f142181123bdf04edceb703cda229ba08b79092aad0eada9552d51966ee46229a6002557f20c99bb8b43cd63ee07ee8f33b445888ff638f67a7019b6d50036352a0e5e7bd6003557f1a999f92e772c387eb618ff2864256f26f268addaca43c88af7f8fab56ee19e76004557f0b81b4da4b6b26de7e3997b3c2eb68abb7573206ae5de5b964de736ee40022ab60055581517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000011115806200014357507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001826020015110155b1562000162576040516354be831760e11b815260040160405180910390fd5b81516007819055602083015160088190556200017f919062000296565b6080528051601180546001600160a01b039283166001600160a01b03199182161790915560208084015160128054918516918416919091179055604093840151601380549190941692169190911790915560c0959095528351600e5592840151600f5550805160108054948301519383015160609093015160ff90811663010000000263ff0000001994821662010000029490941663ffff0000199582166101000261ffff1990971691909316179490941792909216919091171790554260a052620005bb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620002a262000345565b83815260208101839052620002b781620002bf565b949350505050565b6040516314d2f97b60e11b815260009073314773c7C42587d72801A47687CebD789b8BC363906329a5f2f690620002fb9085906004016200056e565b602060405180830381865af415801562000319573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200033f9190620005a1565b92915050565b60405180604001604052806002906020820280368337509192915050565b604051608081016001600160401b03811182821017156200039457634e487b7160e01b600052604160045260246000fd5b60405290565b604051606081016001600160401b03811182821017156200039457634e487b7160e01b600052604160045260246000fd5b600060408284031215620003de57600080fd5b604080519081016001600160401b03811182821017156200040f57634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b805160ff811681146200043b57600080fd5b919050565b6001600160a01b03811681146200045657600080fd5b50565b60008060008060008587036101808112156200047457600080fd5b86519550620004878860208901620003cb565b94506080605f19820112156200049c57600080fd5b620004a662000363565b620004b46060890162000429565b8152620004c46080890162000429565b6020820152620004d760a0890162000429565b6040820152620004ea60c0890162000429565b60608201529350620005008860e08901620003cb565b9250606061011f19820112156200051657600080fd5b50620005216200039a565b610120870151620005328162000440565b8152610140870151620005458162000440565b60208201526101608701516200055b8162000440565b6040820152949793965091945092919050565b60408101818360005b60028110156200059857815183526020928301929091019060010162000577565b50505092915050565b600060208284031215620005b457600080fd5b5051919050565b60805160a05160c051611f526200061560003960006102fd0152600081816102dc0152818161057e01528181610816015281816109ec01528181610e0701528181610f2d0152611055015260006103ef0152611f526000f3fe608060405234801561001057600080fd5b50600436106102105760003560e01c8063715018a611610125578063ae93a212116100ad578063bef4876b1161007c578063bef4876b14610535578063c17268d914610542578063e1c7392a1461054b578063f2fde38b14610553578063fba630f21461056657600080fd5b8063ae93a212146104a8578063b5f38c81146104bb578063bc14ee2b146104d8578063bea140b31461052257600080fd5b80638aa0ba92116100f45780638aa0ba92146103ea5780638da5cb5b146104115780639c9717291461042c5780639cfced971461043f578063ac98e5df1461045257600080fd5b8063715018a6146103a95780637296aaea146103b15780637d0a81c8146103c457806386f3c3f7146103d757600080fd5b80633dfb88b2116101a857806358bfc3791161017757806358bfc3791461034d5780635bb93995146103605780635d5909dd1461037357806362a361bb1461037c578063683f3dc31461038f57600080fd5b80633dfb88b2146102c75780634909229f146102da5780634f367f0f1461032157806354dab1771461032c57600080fd5b8063167fd483116101e4578063167fd48314610280578063184ff47f1461029357806331e766a5146102a6578063394b78a2146102b457600080fd5b8062329f2f146102155780630396a0ce1461021f57806306912d3c146102475780630f4cf69214610269575b600080fd5b61021d61056f565b005b600e54600f5461022d919082565b604080519283526020830191909152015b60405180910390f35b61025a610255366004611756565b610688565b60405161023e939291906117ae565b610272600c5481565b60405190815260200161023e565b61027261028e36600461189f565b610736565b61021d6102a13660046118d6565b61080f565b60075460085461022d919082565b61021d6102c23660046118f8565b6109e5565b6102726102d536600461193b565b610ba5565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061022d565b600d54600c5461022d565b61021d61033a3660046119a2565b6014805460ff1916911515919091179055565b61027261035b3660046119bf565b610c26565b61027261036e3660046118d6565b610cc0565b610272600d5481565b61027261038a366004611a65565b610ce5565b610397600a81565b60405160ff909116815260200161023e565b61021d610d1f565b61021d6103bf366004611a81565b610d33565b6102726103d2366004611b4a565b610db8565b61021d6103e53660046118d6565b610df8565b6102727f000000000000000000000000000000000000000000000000000000000000000081565b6000546040516001600160a01b03909116815260200161023e565b61021d61043a366004611bac565b610f1e565b61027261044d366004611bc5565b61100c565b60105461047b9060ff808216916101008104821691620100008204811691630100000090041684565b6040805160ff9586168152938516602085015291841691830191909152909116606082015260800161023e565b61021d6104b6366004611bac565b611046565b600a546104c89060ff1681565b604051901515815260200161023e565b6011546012546013546104f8926001600160a01b03908116928116911683565b604080516001600160a01b039485168152928416602084015292169181019190915260600161023e565b610272610530366004611c1e565b611334565b6014546104c89060ff1681565b610272600b5481565b61021d61136e565b61021d610561366004611c8c565b611498565b61027260095481565b610577611516565b60006105a37f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff1615156000036105ce57604051630931513d60e11b815260040160405180910390fd5b6012546010546040516324a47aeb60e01b81526201000090910460ff1660048201526000916001600160a01b0316906324a47aeb906024016020604051808303816000875af1158015610625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106499190611cd2565b90507fc5624680ab5d50c84507f9e0dc2032163de2bda906ab8a661a53dd4d43bd5dc78160405161067c91815260200190565b60405180910390a15050565b6106906115c0565b604080518082019091526000808252602082015260006106ae6115df565b85518152602080870151828201526040805180820182527f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd781527f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d8184015281518083019092528782529181018390529450925061072c8484610736565b9150509250925092565b60006107406115fe565b6020848101805151835280518201519183019190915280516040908101519083015280516060908101519083015251608090810151908201526107816115fe565b6020858101805160a0908101518452815160c0015184840152815160e001516040808601919091528251610100015160608601529151610120015160808501528151908101909152865181526108069181016107dc8561100c565b81526020016107ea8461100c565b815260200186600001518152602001866020015181525061100c565b95945050505050565b600061083b7f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff1615156001036108665760405163148fb9a960e31b815260040160405180910390fd5b600e54600c541061088a57604051631ec0b2f760e01b815260040160405180910390fd5b600c805460010190556013546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e9190611d01565b506040805180820190915283815260208101839052600080610931836002610688565b601254604051631ffc735d60e01b8152600481018390529395509093506001600160a01b031691631ffc735d91506024016020604051808303816000875af1158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190611cd2565b507f935afc7bb7cc33eb3e24e20dcfc75f5b21fa58e9c82cca06435238efaf9a3a58826040516109d59190611d1e565b60405180910390a1505050505050565b6000610a117f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff161515600103610a3c5760405163148fb9a960e31b815260040160405180910390fd5b600e54600c5410610a6057604051631ec0b2f760e01b815260040160405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018235101580610ab457507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001826020013510155b15610ad2576040516354be831760e11b815260040160405180910390fd5b600c8054600190810190915583526000610af58461028e36869003860186611d2d565b601254604051631ffc735d60e01b8152600481018390529192506001600160a01b031690631ffc735d906024016020604051808303816000875af1158015610b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b659190611cd2565b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b8484604051610b97929190611d49565b60405180910390a150505050565b60405163248f667760e01b815260009073fad3e45dfe1f6e73fdd5e9426cc69752698337af9063248f667790610bdf908590600401611d72565b602060405180830381865af4158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190611cd2565b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600283604051602001610c5c9190611da3565b60408051601f1981840301815290829052610c7691611dd9565b602060405180830381855afa158015610c93573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610cb69190611cd2565b610c209190611e08565b6000610cca61161c565b83815260208101839052610cdd81610ce5565b949350505050565b6040516314d2f97b60e11b815260009073314773c7C42587d72801A47687CebD789b8BC363906329a5f2f690610bdf908590600401611e2a565b610d27611516565b610d316000611570565b565b828114610d535760405163ca3487f760e01b815260040160405180910390fd5b8260005b81811015610db057610da8868683818110610d7457610d74611ceb565b90506101600201803603810190610d8b9190611e52565b858584818110610d9d57610d9d611ceb565b9050604002016109e5565b600101610d57565b505050505050565b6000610dc261163a565b8251518152825160209081015181830152830151816002602002015260408301516060820152610df181610ba5565b9392505050565b610e00611516565b6000610e2c7f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff161515600003610e5757604051630931513d60e11b815260040160405180910390fd5b600a5460ff1615610e7b5760405163084ef7b960e41b815260040160405180910390fd5b60115460405163cfa1fa0360e01b815260048101859052602481018490526001600160a01b039091169063cfa1fa0390604401600060405180830381600087803b158015610ec857600080fd5b505af1158015610edc573d6000803e3d6000fd5b505050507fbe5eae95ff0a9a2779506ae62da06dda1e349311d3f2b6ceb990ea42b6a5f20b83604051610f1191815260200190565b60405180910390a1505050565b610f26611516565b6000610f527f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff161515600003610f7d57604051630931513d60e11b815260040160405180910390fd5b60125460405163c15da65b60e01b8152600481018490526001600160a01b039091169063c15da65b90602401600060405180830381600087803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b505050507f1245b881cb30fdad22b2f9fde2d5c2a3605bbdf272d5e8a2235d8c9e81aba2ce8260405161067c91815260200190565b604051630926f44b60e31b815260009073E4F8D0de10deE47C15e76F6B6760B689595a3cF090634937a25890610bdf908590600401611e6f565b61104e611516565b600061107a7f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff1615156000036110a557604051630931513d60e11b815260040160405180910390fd5b600a5460ff16156110c95760405163084ef7b960e41b815260040160405180910390fd5b600a805460ff1916600117905560115460408051630c0775ff60e31b815290516001600160a01b039092169163603baff8916004808201926020929091908290030181865afa158015611120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111449190611e97565b6001600160a01b031663b6a64acd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a59190611d01565b6111c157604051624a03c360e31b815260040160405180910390fd5b60115460405163dd0982a360e01b8152600481018490526001600160a01b039091169063dd0982a3906024016020604051808303816000875af115801561120c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112309190611cd2565b60095561123b611658565b600954815260105460019061125b9082906301000000900460ff16611eb4565b60ff166005811061126e5761126e611ceb565b015460208201526000604082015261128581611334565b600b556011546040805163122db15360e01b815290516001600160a01b039092169163122db153916004808201926020929091908290030181865afa1580156112d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f69190611cd2565b600d8190556009546040517fa80928657383ff9d374f1409cf51e7460a64472b6baeb5ded1199830c15bae0192610f11928252602082015260400190565b6040516304b98e1d60e31b8152600090730195247B6B2b78219A78865F85350543562eadbc906325cc70e890610bdf908590600401611ecd565b60065460ff1615611392576040516342a2e18d60e01b815260040160405180910390fd5b6006805460ff19166001908117909155600c805482019055604080518082019091527f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f71181526000602082018190529091819081906113f1908590610688565b601254604051631ffc735d60e01b81526004810183905293965091945092506001600160a01b031690631ffc735d906024016020604051808303816000875af1158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190611cd2565b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b8383604051610b97929190611ef5565b6114a0611516565b6001600160a01b03811661150a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61151381611570565b50565b6000546001600160a01b03163314610d315760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611501565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518060400160405280600081526020016115da6115df565b905290565b604051806101400160405280600a906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156116af576116af611676565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156116de576116de611676565b604052919050565b600082601f8301126116f757600080fd5b6040516040810181811067ffffffffffffffff8211171561171a5761171a611676565b806040525080604084018581111561173157600080fd5b845b8181101561174b578035835260209283019201611733565b509195945050505050565b6000806060838503121561176957600080fd5b61177384846116e6565b946040939093013593505050565b8051825260208082015181840160005b600a811015610db057825182529183019190830190600101611791565b6101c081016117bd8286611781565b83516101608301526020909301516101808201526101a00152919050565b60006101608083850312156117ef57600080fd5b6117f761168c565b915082358252602084603f85011261180e57600080fd5b604051610140810181811067ffffffffffffffff8211171561183257611832611676565b60405291840191808684111561184757600080fd5b8286015b84811015611862578035825290830190830161184b565b5050908301525092915050565b60006040828403121561188157600080fd5b61188961168c565b9050813581526020820135602082015292915050565b6000806101a083850312156118b357600080fd5b6118bd84846117db565b91506118cd84610160850161186f565b90509250929050565b600080604083850312156118e957600080fd5b50508035926020909101359150565b6000808284036101a081121561190d57600080fd5b61191785856117db565b9250604061015f198201121561192c57600080fd5b50610160830190509250929050565b60006080828403121561194d57600080fd5b82601f83011261195c57600080fd5b6040516080810181811067ffffffffffffffff8211171561197f5761197f611676565b60405280608084018581111561173157600080fd5b801515811461151357600080fd5b6000602082840312156119b457600080fd5b8135610df181611994565b600060208083850312156119d257600080fd5b823567ffffffffffffffff808211156119ea57600080fd5b818501915085601f8301126119fe57600080fd5b813581811115611a1057611a10611676565b8060051b9150611a218483016116b5565b8181529183018401918481019088841115611a3b57600080fd5b938501935b83851015611a5957843582529385019390850190611a40565b98975050505050505050565b600060408284031215611a7757600080fd5b610df183836116e6565b60008060008060408587031215611a9757600080fd5b843567ffffffffffffffff80821115611aaf57600080fd5b818701915087601f830112611ac357600080fd5b813581811115611ad257600080fd5b88602061016083028501011115611ae857600080fd5b602092830196509450908601359080821115611b0357600080fd5b818701915087601f830112611b1757600080fd5b813581811115611b2657600080fd5b8860208260061b8501011115611b3b57600080fd5b95989497505060200194505050565b600060808284031215611b5c57600080fd5b6040516060810181811067ffffffffffffffff82111715611b7f57611b7f611676565b604052611b8c848461186f565b815260408301356020820152606083013560408201528091505092915050565b600060208284031215611bbe57600080fd5b5035919050565b600060a08284031215611bd757600080fd5b82601f830112611be657600080fd5b60405160a0810181811067ffffffffffffffff82111715611c0957611c09611676565b6040528060a084018581111561173157600080fd5b600060608284031215611c3057600080fd5b82601f830112611c3f57600080fd5b6040516060810181811067ffffffffffffffff82111715611c6257611c62611676565b60405280606084018581111561173157600080fd5b6001600160a01b038116811461151357600080fd5b600060208284031215611c9e57600080fd5b8135610df181611c77565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c2057610c20611ca9565b600060208284031215611ce457600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611d1357600080fd5b8151610df181611994565b6101608101610c208284611781565b600060408284031215611d3f57600080fd5b610df1838361186f565b6101a08101611d588285611781565b823561016083015260208301356101808301529392505050565b60808101818360005b6004811015611d9a578151835260209283019290910190600101611d7b565b50505092915050565b815160009082906020808601845b83811015611dcd57815185529382019390820190600101611db1565b50929695505050505050565b6000825160005b81811015611dfa5760208186018101518583015201611de0565b506000920191825250919050565b600082611e2557634e487b7160e01b600052601260045260246000fd5b500690565b60408101818360005b6002811015611d9a578151835260209283019290910190600101611e33565b60006101608284031215611e6557600080fd5b610df183836117db565b60a08101818360005b6005811015611d9a578151835260209283019290910190600101611e78565b600060208284031215611ea957600080fd5b8151610df181611c77565b60ff8281168282160390811115610c2057610c20611ca9565b60608101818360005b6003811015611d9a578151835260209283019290910190600101611ed6565b6101a08101611f048285611781565b82516101608301526020830151610180830152610df156fea2646970667358221220cb10500d4d048caa02805f17de02b36f8a9e074187c8de02da41b5ee4942d6c764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102105760003560e01c8063715018a611610125578063ae93a212116100ad578063bef4876b1161007c578063bef4876b14610535578063c17268d914610542578063e1c7392a1461054b578063f2fde38b14610553578063fba630f21461056657600080fd5b8063ae93a212146104a8578063b5f38c81146104bb578063bc14ee2b146104d8578063bea140b31461052257600080fd5b80638aa0ba92116100f45780638aa0ba92146103ea5780638da5cb5b146104115780639c9717291461042c5780639cfced971461043f578063ac98e5df1461045257600080fd5b8063715018a6146103a95780637296aaea146103b15780637d0a81c8146103c457806386f3c3f7146103d757600080fd5b80633dfb88b2116101a857806358bfc3791161017757806358bfc3791461034d5780635bb93995146103605780635d5909dd1461037357806362a361bb1461037c578063683f3dc31461038f57600080fd5b80633dfb88b2146102c75780634909229f146102da5780634f367f0f1461032157806354dab1771461032c57600080fd5b8063167fd483116101e4578063167fd48314610280578063184ff47f1461029357806331e766a5146102a6578063394b78a2146102b457600080fd5b8062329f2f146102155780630396a0ce1461021f57806306912d3c146102475780630f4cf69214610269575b600080fd5b61021d61056f565b005b600e54600f5461022d919082565b604080519283526020830191909152015b60405180910390f35b61025a610255366004611756565b610688565b60405161023e939291906117ae565b610272600c5481565b60405190815260200161023e565b61027261028e36600461189f565b610736565b61021d6102a13660046118d6565b61080f565b60075460085461022d919082565b61021d6102c23660046118f8565b6109e5565b6102726102d536600461193b565b610ba5565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061022d565b600d54600c5461022d565b61021d61033a3660046119a2565b6014805460ff1916911515919091179055565b61027261035b3660046119bf565b610c26565b61027261036e3660046118d6565b610cc0565b610272600d5481565b61027261038a366004611a65565b610ce5565b610397600a81565b60405160ff909116815260200161023e565b61021d610d1f565b61021d6103bf366004611a81565b610d33565b6102726103d2366004611b4a565b610db8565b61021d6103e53660046118d6565b610df8565b6102727f000000000000000000000000000000000000000000000000000000000000000081565b6000546040516001600160a01b03909116815260200161023e565b61021d61043a366004611bac565b610f1e565b61027261044d366004611bc5565b61100c565b60105461047b9060ff808216916101008104821691620100008204811691630100000090041684565b6040805160ff9586168152938516602085015291841691830191909152909116606082015260800161023e565b61021d6104b6366004611bac565b611046565b600a546104c89060ff1681565b604051901515815260200161023e565b6011546012546013546104f8926001600160a01b03908116928116911683565b604080516001600160a01b039485168152928416602084015292169181019190915260600161023e565b610272610530366004611c1e565b611334565b6014546104c89060ff1681565b610272600b5481565b61021d61136e565b61021d610561366004611c8c565b611498565b61027260095481565b610577611516565b60006105a37f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff1615156000036105ce57604051630931513d60e11b815260040160405180910390fd5b6012546010546040516324a47aeb60e01b81526201000090910460ff1660048201526000916001600160a01b0316906324a47aeb906024016020604051808303816000875af1158015610625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106499190611cd2565b90507fc5624680ab5d50c84507f9e0dc2032163de2bda906ab8a661a53dd4d43bd5dc78160405161067c91815260200190565b60405180910390a15050565b6106906115c0565b604080518082019091526000808252602082015260006106ae6115df565b85518152602080870151828201526040805180820182527f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd781527f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d8184015281518083019092528782529181018390529450925061072c8484610736565b9150509250925092565b60006107406115fe565b6020848101805151835280518201519183019190915280516040908101519083015280516060908101519083015251608090810151908201526107816115fe565b6020858101805160a0908101518452815160c0015184840152815160e001516040808601919091528251610100015160608601529151610120015160808501528151908101909152865181526108069181016107dc8561100c565b81526020016107ea8461100c565b815260200186600001518152602001866020015181525061100c565b95945050505050565b600061083b7f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff1615156001036108665760405163148fb9a960e31b815260040160405180910390fd5b600e54600c541061088a57604051631ec0b2f760e01b815260040160405180910390fd5b600c805460010190556013546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e9190611d01565b506040805180820190915283815260208101839052600080610931836002610688565b601254604051631ffc735d60e01b8152600481018390529395509093506001600160a01b031691631ffc735d91506024016020604051808303816000875af1158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190611cd2565b507f935afc7bb7cc33eb3e24e20dcfc75f5b21fa58e9c82cca06435238efaf9a3a58826040516109d59190611d1e565b60405180910390a1505050505050565b6000610a117f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff161515600103610a3c5760405163148fb9a960e31b815260040160405180910390fd5b600e54600c5410610a6057604051631ec0b2f760e01b815260040160405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018235101580610ab457507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001826020013510155b15610ad2576040516354be831760e11b815260040160405180910390fd5b600c8054600190810190915583526000610af58461028e36869003860186611d2d565b601254604051631ffc735d60e01b8152600481018390529192506001600160a01b031690631ffc735d906024016020604051808303816000875af1158015610b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b659190611cd2565b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b8484604051610b97929190611d49565b60405180910390a150505050565b60405163248f667760e01b815260009073__$ce9c2c925f157047e54fa833ec4e61409f$__9063248f667790610bdf908590600401611d72565b602060405180830381865af4158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190611cd2565b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600283604051602001610c5c9190611da3565b60408051601f1981840301815290829052610c7691611dd9565b602060405180830381855afa158015610c93573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610cb69190611cd2565b610c209190611e08565b6000610cca61161c565b83815260208101839052610cdd81610ce5565b949350505050565b6040516314d2f97b60e11b815260009073__$6574937f64fc1d7710ec0e28b7a36713bb$__906329a5f2f690610bdf908590600401611e2a565b610d27611516565b610d316000611570565b565b828114610d535760405163ca3487f760e01b815260040160405180910390fd5b8260005b81811015610db057610da8868683818110610d7457610d74611ceb565b90506101600201803603810190610d8b9190611e52565b858584818110610d9d57610d9d611ceb565b9050604002016109e5565b600101610d57565b505050505050565b6000610dc261163a565b8251518152825160209081015181830152830151816002602002015260408301516060820152610df181610ba5565b9392505050565b610e00611516565b6000610e2c7f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff161515600003610e5757604051630931513d60e11b815260040160405180910390fd5b600a5460ff1615610e7b5760405163084ef7b960e41b815260040160405180910390fd5b60115460405163cfa1fa0360e01b815260048101859052602481018490526001600160a01b039091169063cfa1fa0390604401600060405180830381600087803b158015610ec857600080fd5b505af1158015610edc573d6000803e3d6000fd5b505050507fbe5eae95ff0a9a2779506ae62da06dda1e349311d3f2b6ceb990ea42b6a5f20b83604051610f1191815260200190565b60405180910390a1505050565b610f26611516565b6000610f527f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff161515600003610f7d57604051630931513d60e11b815260040160405180910390fd5b60125460405163c15da65b60e01b8152600481018490526001600160a01b039091169063c15da65b90602401600060405180830381600087803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b505050507f1245b881cb30fdad22b2f9fde2d5c2a3605bbdf272d5e8a2235d8c9e81aba2ce8260405161067c91815260200190565b604051630926f44b60e31b815260009073__$20527677031d76601747626a9845039fe4$__90634937a25890610bdf908590600401611e6f565b61104e611516565b600061107a7f000000000000000000000000000000000000000000000000000000000000000042611cbf565b60145490915060ff1615156000036110a557604051630931513d60e11b815260040160405180910390fd5b600a5460ff16156110c95760405163084ef7b960e41b815260040160405180910390fd5b600a805460ff1916600117905560115460408051630c0775ff60e31b815290516001600160a01b039092169163603baff8916004808201926020929091908290030181865afa158015611120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111449190611e97565b6001600160a01b031663b6a64acd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a59190611d01565b6111c157604051624a03c360e31b815260040160405180910390fd5b60115460405163dd0982a360e01b8152600481018490526001600160a01b039091169063dd0982a3906024016020604051808303816000875af115801561120c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112309190611cd2565b60095561123b611658565b600954815260105460019061125b9082906301000000900460ff16611eb4565b60ff166005811061126e5761126e611ceb565b015460208201526000604082015261128581611334565b600b556011546040805163122db15360e01b815290516001600160a01b039092169163122db153916004808201926020929091908290030181865afa1580156112d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f69190611cd2565b600d8190556009546040517fa80928657383ff9d374f1409cf51e7460a64472b6baeb5ded1199830c15bae0192610f11928252602082015260400190565b6040516304b98e1d60e31b815260009073__$dc01a9744591ab014bc46a3b7671cdaefb$__906325cc70e890610bdf908590600401611ecd565b60065460ff1615611392576040516342a2e18d60e01b815260040160405180910390fd5b6006805460ff19166001908117909155600c805482019055604080518082019091527f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f71181526000602082018190529091819081906113f1908590610688565b601254604051631ffc735d60e01b81526004810183905293965091945092506001600160a01b031690631ffc735d906024016020604051808303816000875af1158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190611cd2565b507fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b8383604051610b97929190611ef5565b6114a0611516565b6001600160a01b03811661150a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61151381611570565b50565b6000546001600160a01b03163314610d315760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611501565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518060400160405280600081526020016115da6115df565b905290565b604051806101400160405280600a906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156116af576116af611676565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156116de576116de611676565b604052919050565b600082601f8301126116f757600080fd5b6040516040810181811067ffffffffffffffff8211171561171a5761171a611676565b806040525080604084018581111561173157600080fd5b845b8181101561174b578035835260209283019201611733565b509195945050505050565b6000806060838503121561176957600080fd5b61177384846116e6565b946040939093013593505050565b8051825260208082015181840160005b600a811015610db057825182529183019190830190600101611791565b6101c081016117bd8286611781565b83516101608301526020909301516101808201526101a00152919050565b60006101608083850312156117ef57600080fd5b6117f761168c565b915082358252602084603f85011261180e57600080fd5b604051610140810181811067ffffffffffffffff8211171561183257611832611676565b60405291840191808684111561184757600080fd5b8286015b84811015611862578035825290830190830161184b565b5050908301525092915050565b60006040828403121561188157600080fd5b61188961168c565b9050813581526020820135602082015292915050565b6000806101a083850312156118b357600080fd5b6118bd84846117db565b91506118cd84610160850161186f565b90509250929050565b600080604083850312156118e957600080fd5b50508035926020909101359150565b6000808284036101a081121561190d57600080fd5b61191785856117db565b9250604061015f198201121561192c57600080fd5b50610160830190509250929050565b60006080828403121561194d57600080fd5b82601f83011261195c57600080fd5b6040516080810181811067ffffffffffffffff8211171561197f5761197f611676565b60405280608084018581111561173157600080fd5b801515811461151357600080fd5b6000602082840312156119b457600080fd5b8135610df181611994565b600060208083850312156119d257600080fd5b823567ffffffffffffffff808211156119ea57600080fd5b818501915085601f8301126119fe57600080fd5b813581811115611a1057611a10611676565b8060051b9150611a218483016116b5565b8181529183018401918481019088841115611a3b57600080fd5b938501935b83851015611a5957843582529385019390850190611a40565b98975050505050505050565b600060408284031215611a7757600080fd5b610df183836116e6565b60008060008060408587031215611a9757600080fd5b843567ffffffffffffffff80821115611aaf57600080fd5b818701915087601f830112611ac357600080fd5b813581811115611ad257600080fd5b88602061016083028501011115611ae857600080fd5b602092830196509450908601359080821115611b0357600080fd5b818701915087601f830112611b1757600080fd5b813581811115611b2657600080fd5b8860208260061b8501011115611b3b57600080fd5b95989497505060200194505050565b600060808284031215611b5c57600080fd5b6040516060810181811067ffffffffffffffff82111715611b7f57611b7f611676565b604052611b8c848461186f565b815260408301356020820152606083013560408201528091505092915050565b600060208284031215611bbe57600080fd5b5035919050565b600060a08284031215611bd757600080fd5b82601f830112611be657600080fd5b60405160a0810181811067ffffffffffffffff82111715611c0957611c09611676565b6040528060a084018581111561173157600080fd5b600060608284031215611c3057600080fd5b82601f830112611c3f57600080fd5b6040516060810181811067ffffffffffffffff82111715611c6257611c62611676565b60405280606084018581111561173157600080fd5b6001600160a01b038116811461151357600080fd5b600060208284031215611c9e57600080fd5b8135610df181611c77565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c2057610c20611ca9565b600060208284031215611ce457600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611d1357600080fd5b8151610df181611994565b6101608101610c208284611781565b600060408284031215611d3f57600080fd5b610df1838361186f565b6101a08101611d588285611781565b823561016083015260208301356101808301529392505050565b60808101818360005b6004811015611d9a578151835260209283019290910190600101611d7b565b50505092915050565b815160009082906020808601845b83811015611dcd57815185529382019390820190600101611db1565b50929695505050505050565b6000825160005b81811015611dfa5760208186018101518583015201611de0565b506000920191825250919050565b600082611e2557634e487b7160e01b600052601260045260246000fd5b500690565b60408101818360005b6002811015611d9a578151835260209283019290910190600101611e33565b60006101608284031215611e6557600080fd5b610df183836117db565b60a08101818360005b6005811015611d9a578151835260209283019290910190600101611e78565b600060208284031215611ea957600080fd5b8151610df181611c77565b60ff8281168282160390811115610c2057610c20611ca9565b60608101818360005b6003811015611d9a578151835260209283019290910190600101611ed6565b6101a08101611f048285611781565b82516101608301526020830151610180830152610df156fea2646970667358221220cb10500d4d048caa02805f17de02b36f8a9e074187c8de02da41b5ee4942d6c764736f6c63430008110033",
  "libraries": {
    "PoseidonT3": "0x314773c7C42587d72801A47687CebD789b8BC363",
    "PoseidonT4": "0x0195247B6B2b78219A78865F85350543562eadbc",
    "PoseidonT5": "0xfad3e45dfe1f6e73fdd5e9426cc69752698337af",
    "PoseidonT6": "0xE4F8D0de10deE47C15e76F6B6760B689595a3cF0"
  },
  "devdoc": {
    "details": "Do not deploy this directly. Use PollFactory.deploy() which performs some checks on the Poll constructor arguments.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_coordinatorPubKey": "The coordinator's public key",
          "_duration": "The duration of the voting period, in seconds",
          "_extContracts": "The external contracts",
          "_maxValues": "The maximum number of messages and vote options",
          "_treeDepths": "The depths of the merkle trees"
        }
      },
      "getDeployTimeAndDuration()": {
        "returns": {
          "pollDeployTime": "The deployment timestamp",
          "pollDuration": "The duration of the poll"
        }
      },
      "hash2(uint256[2])": {
        "params": {
          "array": "An array of two uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the two elements."
        }
      },
      "hash3(uint256[3])": {
        "params": {
          "array": "An array of three uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the three elements."
        }
      },
      "hash4(uint256[4])": {
        "params": {
          "array": "An array of four uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the four elements."
        }
      },
      "hash5(uint256[5])": {
        "params": {
          "array": "An array of five uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the five elements."
        }
      },
      "hashLeftRight(uint256,uint256)": {
        "params": {
          "left": "the first element to hash.",
          "right": "the second element to hash."
        },
        "returns": {
          "result": "The Poseidon hash of the two elements."
        }
      },
      "hashMessageAndEncPubKey((uint256,uint256[10]),(uint256,uint256))": {
        "params": {
          "_encPubKey": "the encryption public key to be hashed",
          "_message": "the message to be hashed"
        },
        "returns": {
          "msgHash": "The hash of the message and the encryption public key"
        }
      },
      "hashStateLeaf(((uint256,uint256),uint256,uint256))": {
        "params": {
          "_stateLeaf": "the state leaf to be hashed"
        },
        "returns": {
          "ciphertext": "The hash of the state leaf"
        }
      },
      "init()": {
        "details": "Should be called immediately after Poll creation and messageAq ownership transferred"
      },
      "mergeMaciStateAq(uint256)": {
        "params": {
          "_pollId": "The ID of the active Poll"
        }
      },
      "mergeMaciStateAqSubRoots(uint256,uint256)": {
        "params": {
          "_numSrQueueOps": "Number of operations",
          "_pollId": "The ID of the active Poll"
        }
      },
      "mergeMessageAqSubRoots(uint256)": {
        "params": {
          "_numSrQueueOps": "The number of subroot queue operations to perform"
        }
      },
      "numSignUpsAndMessages()": {
        "returns": {
          "numMsgs": "The number of messages sent by voters",
          "numSUps": "The number of signups"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "padAndHashMessage(uint256[2],uint256)": {
        "params": {
          "dataToPad": "the data to be padded",
          "msgType": "the type of the message"
        },
        "returns": {
          "message": "The padded message",
          "msgHash": "The hash of the padded message and encryption key",
          "padKey": "The padding public key"
        }
      },
      "publishMessage((uint256,uint256[10]),(uint256,uint256))": {
        "params": {
          "_encPubKey": "An epheremal public key which can be combined with the coordinator's private key to generate an ECDH shared key with which to encrypt the message.",
          "_message": "The message to publish"
        }
      },
      "publishMessageBatch((uint256,uint256[10])[],(uint256,uint256)[])": {
        "details": "Can only be submitted before the voting deadline",
        "params": {
          "_encPubKeys": "the encrypted public keys",
          "_messages": "the messages"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sha256Hash(uint256[])": {
        "params": {
          "array": "The array of uint256 elements."
        },
        "returns": {
          "result": "The SHA256 hash of the array."
        }
      },
      "topup(uint256,uint256)": {
        "params": {
          "amount": "The amount of credits to topup",
          "stateIndex": "The index of user in the state queue"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Poll",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidMessage()": [
        {
          "notice": "custom errors"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      },
      "constructor": {
        "notice": "Each MACI instance can have multiple Polls. When a Poll is deployed, its voting period starts immediately."
      },
      "coordinatorPubKey()": {
        "notice": "The coordinator's public key"
      },
      "coordinatorPubKeyHash()": {
        "notice": "Hash of the coordinator's public key"
      },
      "currentSbCommitment()": {
        "notice": "Get the commitment to the state leaves and the ballots. This is hash3(stateRoot, ballotRoot, salt). Its initial value should be hash(maciStateRootSnapshot, emptyBallotRoot, 0) Each successful invocation of processMessages() should use a different salt to update this value, so that an external observer cannot tell in the case that none of the messages are valid."
      },
      "extContracts()": {
        "notice": "The contracts used by the Poll"
      },
      "getDeployTimeAndDuration()": {
        "notice": "Returns the Poll's deploy time and duration"
      },
      "hash2(uint256[2])": {
        "notice": "Computes the Poseidon hash of two uint256 elements."
      },
      "hash3(uint256[3])": {
        "notice": "Computes the Poseidon hash of three uint256 elements."
      },
      "hash4(uint256[4])": {
        "notice": "Computes the Poseidon hash of four uint256 elements."
      },
      "hash5(uint256[5])": {
        "notice": "Computes the Poseidon hash of five uint256 elements."
      },
      "hashLeftRight(uint256,uint256)": {
        "notice": "Computes the Poseidon hash of two uint256 elements."
      },
      "hashMessageAndEncPubKey((uint256,uint256[10]),(uint256,uint256))": {
        "notice": "An utility function used to hash a MACI message and an encryption public key"
      },
      "hashStateLeaf(((uint256,uint256),uint256,uint256))": {
        "notice": "An utility function used to hash a state leaf"
      },
      "init()": {
        "notice": "The initialization function."
      },
      "maxValues()": {
        "notice": "Max values for the poll"
      },
      "mergeMaciStateAq(uint256)": {
        "notice": "The second step of merging the MACI state AccQueue. This allows the ProcessMessages circuit to access the latest state tree and ballots via currentSbCommitment."
      },
      "mergeMaciStateAqSubRoots(uint256,uint256)": {
        "notice": "The first step of merging the MACI state AccQueue. This allows the ProcessMessages circuit to access the latest state tree and ballots via currentSbCommitment."
      },
      "mergeMessageAq()": {
        "notice": "The second step in merging the message AccQueue so that the ProcessMessages circuit can access the message root."
      },
      "mergeMessageAqSubRoots(uint256)": {
        "notice": "The first step in merging the message AccQueue so that the ProcessMessages circuit can access the message root."
      },
      "mergedStateRoot()": {
        "notice": "the state root of the state merkle tree"
      },
      "numMessages()": {
        "notice": "The number of messages that have been published"
      },
      "numSignUpsAndMessages()": {
        "notice": "The number of messages which have been processed and the number of signups"
      },
      "numSignups()": {
        "notice": "The number of signups that have been processed before the Poll ended (stateAq merged)"
      },
      "padAndHashMessage(uint256[2],uint256)": {
        "notice": "An utility function used to pad and hash a MACI message"
      },
      "publishMessage((uint256,uint256[10]),(uint256,uint256))": {
        "notice": "Allows anyone to publish a message (an encrypted command and signature). This function also enqueues the message."
      },
      "publishMessageBatch((uint256,uint256[10])[],(uint256,uint256)[])": {
        "notice": "submit a message batch"
      },
      "sha256Hash(uint256[])": {
        "notice": "Computes the SHA256 hash of an array of uint256 elements."
      },
      "stateAqMerged()": {
        "notice": "Whether the MACI contract's stateAq has been merged by this contract"
      },
      "topup(uint256,uint256)": {
        "notice": "Allows to publish a Topup message"
      },
      "treeDepths()": {
        "notice": "Depths of the merkle trees"
      }
    },
    "notice": "A Poll contract allows voters to submit encrypted messages which can be either votes, key change messages or topup messages.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Poll.sol:Poll",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4511,
        "contract": "contracts/Poll.sol:Poll",
        "label": "emptyBallotRoots",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 1509,
        "contract": "contracts/Poll.sol:Poll",
        "label": "isInit",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1513,
        "contract": "contracts/Poll.sol:Poll",
        "label": "coordinatorPubKey",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(PubKey)4888_storage"
      },
      {
        "astId": 1519,
        "contract": "contracts/Poll.sol:Poll",
        "label": "mergedStateRoot",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1526,
        "contract": "contracts/Poll.sol:Poll",
        "label": "stateAqMerged",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1529,
        "contract": "contracts/Poll.sol:Poll",
        "label": "currentSbCommitment",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1532,
        "contract": "contracts/Poll.sol:Poll",
        "label": "numMessages",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1535,
        "contract": "contracts/Poll.sol:Poll",
        "label": "numSignups",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1539,
        "contract": "contracts/Poll.sol:Poll",
        "label": "maxValues",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(MaxValues)4920_storage"
      },
      {
        "astId": 1543,
        "contract": "contracts/Poll.sol:Poll",
        "label": "treeDepths",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(TreeDepths)4915_storage"
      },
      {
        "astId": 1547,
        "contract": "contracts/Poll.sol:Poll",
        "label": "extContracts",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(ExtContracts)4930_storage"
      },
      {
        "astId": 1550,
        "contract": "contracts/Poll.sol:Poll",
        "label": "finished",
        "offset": 0,
        "slot": "20",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AccQueue)4192": {
        "encoding": "inplace",
        "label": "contract AccQueue",
        "numberOfBytes": "20"
      },
      "t_contract(IMACI)3028": {
        "encoding": "inplace",
        "label": "contract IMACI",
        "numberOfBytes": "20"
      },
      "t_contract(TopupCredit)2368": {
        "encoding": "inplace",
        "label": "contract TopupCredit",
        "numberOfBytes": "20"
      },
      "t_struct(ExtContracts)4930_storage": {
        "encoding": "inplace",
        "label": "struct Params.ExtContracts",
        "members": [
          {
            "astId": 4923,
            "contract": "contracts/Poll.sol:Poll",
            "label": "maci",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IMACI)3028"
          },
          {
            "astId": 4926,
            "contract": "contracts/Poll.sol:Poll",
            "label": "messageAq",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(AccQueue)4192"
          },
          {
            "astId": 4929,
            "contract": "contracts/Poll.sol:Poll",
            "label": "topupCredit",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(TopupCredit)2368"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MaxValues)4920_storage": {
        "encoding": "inplace",
        "label": "struct Params.MaxValues",
        "members": [
          {
            "astId": 4917,
            "contract": "contracts/Poll.sol:Poll",
            "label": "maxMessages",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4919,
            "contract": "contracts/Poll.sol:Poll",
            "label": "maxVoteOptions",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PubKey)4888_storage": {
        "encoding": "inplace",
        "label": "struct DomainObjs.PubKey",
        "members": [
          {
            "astId": 4885,
            "contract": "contracts/Poll.sol:Poll",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4887,
            "contract": "contracts/Poll.sol:Poll",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TreeDepths)4915_storage": {
        "encoding": "inplace",
        "label": "struct Params.TreeDepths",
        "members": [
          {
            "astId": 4908,
            "contract": "contracts/Poll.sol:Poll",
            "label": "intStateTreeDepth",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4910,
            "contract": "contracts/Poll.sol:Poll",
            "label": "messageTreeSubDepth",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4912,
            "contract": "contracts/Poll.sol:Poll",
            "label": "messageTreeDepth",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4914,
            "contract": "contracts/Poll.sol:Poll",
            "label": "voteOptionTreeDepth",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}